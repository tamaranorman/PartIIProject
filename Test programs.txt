append([], H, H).

append([H|T],X, [H|S]) :- append(T, X, S).

?- append(A, B, [1, 2, 3, 4, 5]).
?- append([1,2,3], [B], X).

?- append([1], [2], [1,2]).



take([H|T], H, T).
take([H|T], R, [H|S]) :- take(T, R, S).
perm([], []).
perm(L, [H|T]) :- take(L, H, R), perm(R, T).

diff(L) :- perm([1,2,3,4], L).

rows([A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P]) :- diff([A,B,C,D]), diff([E,F,G,H]), diff([I,J,K,L]), diff([M,N,O,P]).

cols([A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P]) :- diff([A,E,I,M]), diff([B,F,J,N]), diff([C,G,K,O]), diff([D,H,L,P]).

box([A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P]) :- diff([A,B,E,F]), diff([C,D,G,H]), diff([I,J,M,N]), diff([K,L,O,P]).

sudoku(L) :- rows(L), cols(L), box(L).
?- sudoku([A,B,4,D,E,2,G,H,I,J,1,L,M,3,O,P]).



take([H|T], H, T).
take([H|T], R, [H|S]) :- take(T, R, S).
perm([], []).
perm(L, [H|T]) :- take(L, H, R), perm(R, T).

checkCantDiagonallyTake([], A, B).

checkCantDiagonallyTake([H|T], Y, Distance) :- H =\= Y + Distance, H =\= Y - Distance, NewDistance is Distance + 1, checkCantDiagonallyTake(T, Y, NewDistance). 

checkDiagonals(R) :- checkDiagonals(R, 1).
checkDiagonals([], A).

checkDiagonals([Y|T], X) :- checkCantDiagonallyTake(T, Y, 1), NewX is X + 1, checkDiagonals(T, NewX).

generateNList(0,L,L).
generateNList(N,L,R) :- N > 0, P is N-1, generateNList(P, [N|L], R).

nQueens(N, R) :- generateNList(N, [], X), perm(X, R), checkDiagonals(R).

oneQueen(R) :- perm([1],R), checkDiagonals(R).

fourQueens(R) :- perm([2,4,1,3], R), checkDiagonals(R).

fiveQueens(R) :- perm([1,2,3,4,5], R), checkDiagonals(R).

eightQueens(R) :- perm([5,3,1,7,2,8,6,4],R), checkDiagonals(R).


a(0, L).
a(N, L) :- N > 0, N1 is N-1, a(N1, L), bigCompute(L).
bigCompute(0).
bigCompute(R) :- R > 0, R1 is R-1, bigCompute(R1).

jar cvfm ComparisonCopyF.jar manifest.txt PrologInterpreter/*.class PrologInterpreter/Structure/*.class PrologInterpreter/Structure/StructureCreators/*.class PrologInterpreter/Utilities/*.class